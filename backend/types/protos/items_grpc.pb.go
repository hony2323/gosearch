// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: items.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ItemsResultsClient is the client API for ItemsResults service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemsResultsClient interface {
	GetResults(ctx context.Context, in *ItemsRequest, opts ...grpc.CallOption) (ItemsResults_GetResultsClient, error)
}

type itemsResultsClient struct {
	cc grpc.ClientConnInterface
}

func NewItemsResultsClient(cc grpc.ClientConnInterface) ItemsResultsClient {
	return &itemsResultsClient{cc}
}

func (c *itemsResultsClient) GetResults(ctx context.Context, in *ItemsRequest, opts ...grpc.CallOption) (ItemsResults_GetResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ItemsResults_ServiceDesc.Streams[0], "/items.ItemsResults/GetResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &itemsResultsGetResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ItemsResults_GetResultsClient interface {
	Recv() (*ItemsResponse, error)
	grpc.ClientStream
}

type itemsResultsGetResultsClient struct {
	grpc.ClientStream
}

func (x *itemsResultsGetResultsClient) Recv() (*ItemsResponse, error) {
	m := new(ItemsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ItemsResultsServer is the server API for ItemsResults service.
// All implementations must embed UnimplementedItemsResultsServer
// for forward compatibility
type ItemsResultsServer interface {
	GetResults(*ItemsRequest, ItemsResults_GetResultsServer) error
	mustEmbedUnimplementedItemsResultsServer()
}

// UnimplementedItemsResultsServer must be embedded to have forward compatible implementations.
type UnimplementedItemsResultsServer struct {
}

func (UnimplementedItemsResultsServer) GetResults(*ItemsRequest, ItemsResults_GetResultsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetResults not implemented")
}
func (UnimplementedItemsResultsServer) mustEmbedUnimplementedItemsResultsServer() {}

// UnsafeItemsResultsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemsResultsServer will
// result in compilation errors.
type UnsafeItemsResultsServer interface {
	mustEmbedUnimplementedItemsResultsServer()
}

func RegisterItemsResultsServer(s grpc.ServiceRegistrar, srv ItemsResultsServer) {
	s.RegisterService(&ItemsResults_ServiceDesc, srv)
}

func _ItemsResults_GetResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ItemsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ItemsResultsServer).GetResults(m, &itemsResultsGetResultsServer{stream})
}

type ItemsResults_GetResultsServer interface {
	Send(*ItemsResponse) error
	grpc.ServerStream
}

type itemsResultsGetResultsServer struct {
	grpc.ServerStream
}

func (x *itemsResultsGetResultsServer) Send(m *ItemsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ItemsResults_ServiceDesc is the grpc.ServiceDesc for ItemsResults service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemsResults_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "items.ItemsResults",
	HandlerType: (*ItemsResultsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetResults",
			Handler:       _ItemsResults_GetResults_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "items.proto",
}
